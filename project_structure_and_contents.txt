СТРУКТУРА ПРОЕКТА:


Директория: .
  Поддиректории:
    .git
    modules
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "vm_public_ip" {
  value = module.vm.public_ip_address
}

output "storage_account_name" {
  value = module.storage.storage_account_name
}

output "mysql_server_fqdn" {
  value = module.database.mysql_server_fqdn
}

output "monitoring_vm_public_ip" {
  value = module.monitoring.monitoring_vm_public_ip
}

output "monitoring_vm_private_ip" {
  value = module.monitoring.monitoring_vm_private_ip
}
----------------------------------------
    main.tf
      Содержимое файла main.tf:
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "rg" {
  name     = "${var.project_name}-rg-${var.environment}"
  location = var.location
}

module "network" {
  source              = "./modules/network"
  resource_group_name = azurerm_resource_group.rg.name
  location            = var.location
  project_name        = var.project_name
  environment         = var.environment
}

module "vm" {
  source              = "./modules/vm"
  resource_group_name = azurerm_resource_group.rg.name
  location            = var.location
  subnet_id           = module.network.subnet_id
  project_name        = var.project_name
  environment         = var.environment
  admin_username      = var.admin_username
  vm_size             = var.vm_size
}

module "storage" {
  source              = "./modules/storage"
  resource_group_name = azurerm_resource_group.rg.name
  location            = var.location
  project_name        = var.project_name
  environment         = var.environment
}

module "database" {
  source                = "./modules/database"
  resource_group_name   = azurerm_resource_group.rg.name
  location              = var.location
  project_name          = var.project_name
  environment           = var.environment
  mysql_admin_username  = var.mysql_admin_username
  mysql_admin_password  = var.mysql_admin_password
  mysql_sku_name        = var.mysql_sku_name
  mysql_version         = var.mysql_version
}

module "monitoring" {
  source              = "./modules/monitoring"
  resource_group_name = azurerm_resource_group.rg.name
  location            = var.location
  subnet_id           = module.network.subnet_id
  project_name        = var.project_name
  environment         = var.environment
  admin_username      = var.admin_username
  ssh_public_key      = var.ssh_public_key
}
----------------------------------------
    terraform.tfvars
      Содержимое файла terraform.tfvars:
location              = "North Europe"
project_name          = "itmarathon"
environment           = "dev"
admin_username        = "azureuser"
vm_size               = "Standard_B1s"
mysql_admin_username  = "mysqladmin"
mysql_admin_password  = "Pa$$w0rd134!"
mysql_sku_name        = "B_Standard_B1s"
mysql_version         = "8.0.21"
----------------------------------------
    project_structure_and_contents.txt
      Содержимое файла project_structure_and_contents.txt:

----------------------------------------
    generate_structure.py
      Содержимое файла generate_structure.py:
#!/usr/bin/env python3

import os

def write_structure_and_contents_to_file(base_dir, output_file):
    with open(output_file, 'w', encoding='utf-8') as out_file:
        out_file.write(f"СТРУКТУРА ПРОЕКТА:\n\n")
        for root, dirs, files in os.walk(base_dir):
            relative_path = os.path.relpath(root, base_dir)
            out_file.write(f"\nДиректория: {relative_path}\n")
            if dirs:
                out_file.write(f"  Поддиректории:\n")
                for d in dirs:
                    out_file.write(f"    {d}\n")
            if files:
                out_file.write(f"  Файлы:\n")
                for f in files:
                    out_file.write(f"    {f}\n")
                    file_path = os.path.join(root, f)
                    out_file.write(f"      Содержимое файла {f}:\n")
                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                            content = file.read()
                            out_file.write(f"{content}\n")
                    except Exception as e:
                        out_file.write(f"Не удалось прочитать файл: {e}\n")
                    out_file.write(f"{'-'*40}\n")

if __name__ == "__main__":
    base_directory = "."  # Текущая директория
    output_filename = "project_structure_and_contents.txt"  # Имя файла для вывода
    write_structure_and_contents_to_file(base_directory, output_filename)
    print(f"Структура проекта и содержимое файлов записаны в {output_filename}")
----------------------------------------
    README.md
      Содержимое файла README.md:
# Azure Infrastructure Project

This project sets up an Azure infrastructure using Terraform, including a virtual network, a Linux VM with Nginx, and a MySQL Flexible Server.

## Prerequisites

- [Terraform](https://www.terraform.io/downloads.html) (>= 0.14.x)
- [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)
- An active Azure subscription

## Project Structure
```.
.
├── main.tf
├── variables.tf
├── outputs.tf
├── modules/
│   ├── network/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── vm/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── database/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   └── storage/
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
├── terraform.tfvars
├── README.md
└── .gitignore
```

## Configuration

1. Clone this repository.
2. Navigate to the project directory.
3. Create a `terraform.tfvars` file and set the required variables (see `variables.tf` for reference).
4. Ensure you have an SSH key at `~/.ssh/id_rsa.pub` or modify the VM module to use a different key.

## Usage

1. Initialize Terraform:
   ```
   terraform init
   ```

2. Review the planned changes:
   ```
   terraform plan
   ```

3. Apply the changes:
   ```
   terraform apply
   ```

4. When you're done, destroy the resources:
   ```
   terraform destroy
   ```

## Modules

- **Network**: Sets up the virtual network, subnet, and network security group.
- **VM**: Creates a Linux VM with Nginx installed.
- **Database**: Provisions a MySQL Flexible Server and a database.

## Customization

To customize the deployment, modify the `terraform.tfvars` file or the individual module files as needed.

## Security Note

Ensure that sensitive information like passwords are not committed to version control. Use environment variables or secure secret management solutions for production deployments.

## Contributing

Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

## License

[MIT](https://choosealicense.com/licenses/mit/)

----------------------------------------
    .gitignore
      Содержимое файла .gitignore:
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore Mac/OSX system files
.DS_Store

# Ignore Windows system files
Thumbs.db

# Ignore editor and IDE files
.vscode/
.idea/
*.swp
*.swo

# Ignore log files
*.log

# Ignore any local environment files
.env

# Ignore any compiled binaries or packages
*.exe
*.dll
*.so
*.dylib

# Ignore any backup files
*.bak
*.backup
*~
terraform.tfvars
----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "location" {
  description = "The Azure region where resources will be created"
  default     = "North Europe"
}

variable "project_name" {
  description = "Name of the project, used in resource names"
}

variable "environment" {
  description = "Environment (dev, test, prod)"
}

variable "admin_username" {
  description = "Username for the VM"
}

variable "vm_size" {
  description = "Size of the virtual machine"
  default     = "Standard_B1s"
}

variable "mysql_admin_username" {
  description = "Username for MySQL admin"
}

variable "mysql_admin_password" {
  description = "Password for MySQL admin"
  sensitive   = true
}

variable "mysql_sku_name" {
  description = "The SKU Name for the MySQL Flexible Server"
  default     = "B_Standard_B1s"
}

variable "mysql_version" {
  description = "The version of MySQL to use"
  default     = "8.0.21"
}

variable "ssh_public_key" {
  description = "The public SSH key to use for VMs"
  type        = string
}




Директория: modules
  Поддиректории:
    database
    network
    storage
    vm
    monitoring

Директория: modules/database
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "mysql_server_fqdn" {
  value = azurerm_mysql_flexible_server.mysql.fqdn
}
----------------------------------------
    main.tf
      Содержимое файла main.tf:
resource "azurerm_mysql_flexible_server" "mysql" {
  name                   = "${var.project_name}-mysql-${var.environment}"
  resource_group_name    = var.resource_group_name
  location               = var.location
  administrator_login    = var.mysql_admin_username
  administrator_password = var.mysql_admin_password
  backup_retention_days  = 7
  sku_name               = var.mysql_sku_name
  version                = var.mysql_version
  lifecycle {
    ignore_changes = [zone]
  }
}

resource "azurerm_mysql_flexible_database" "db" {
  name                = "${var.project_name}db"
  resource_group_name = var.resource_group_name
  server_name         = azurerm_mysql_flexible_server.mysql.name
  charset             = "utf8mb4"
  collation           = "utf8mb4_unicode_ci"
}

resource "azurerm_mysql_flexible_server_firewall_rule" "allow_azure_services" {
  name                = "AllowAzureServices"
  resource_group_name = var.resource_group_name
  server_name         = azurerm_mysql_flexible_server.mysql.name
  start_ip_address    = "0.0.0.0"
  end_ip_address      = "0.0.0.0"
}
----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "resource_group_name" {
  description = "Name of the resource group"
}

variable "location" {
  description = "The Azure region where resources will be created"
}

variable "project_name" {
  description = "Name of the project, used in resource names"
}

variable "environment" {
  description = "Environment (dev, test, prod)"
}

variable "mysql_admin_username" {
  description = "Username for MySQL admin"
}

variable "mysql_admin_password" {
  description = "Password for MySQL admin"
  sensitive   = true
}

variable "mysql_sku_name" {
  description = "The SKU Name for the MySQL Flexible Server"
}

variable "mysql_version" {
  description = "The version of MySQL to use"
}
----------------------------------------

Директория: modules/network
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "subnet_id" {
  value = azurerm_subnet.subnet.id
}

output "nsg_id" {
  value = azurerm_network_security_group.nsg.id
}
----------------------------------------
    main.tf
      Содержимое файла main.tf:
resource "azurerm_virtual_network" "vnet" {
  name                = "${var.project_name}-vnet-${var.environment}"
  address_space       = ["10.0.0.0/16"]
  location            = var.location
  resource_group_name = var.resource_group_name
}

resource "azurerm_subnet" "subnet" {
  name                 = "${var.project_name}-subnet-${var.environment}"
  resource_group_name  = var.resource_group_name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_security_group" "nsg" {
  name                = "${var.project_name}-nsg-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name

  security_rule {
    name                       = "SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}
----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "resource_group_name" {
  description = "Name of the resource group"
}

variable "location" {
  description = "The Azure region where resources will be created"
}

variable "project_name" {
  description = "Name of the project, used in resource names"
}

variable "environment" {
  description = "Environment (dev, test, prod)"
}
----------------------------------------

Директория: modules/storage
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "storage_account_name" {
  value = azurerm_storage_account.storage.name
}

output "storage_account_primary_access_key" {
  value     = azurerm_storage_account.storage.primary_access_key
  sensitive = true
}

----------------------------------------
    main.tf
      Содержимое файла main.tf:
resource "azurerm_storage_account" "storage" {
  name                     = "${var.project_name}storage${var.environment}"
  resource_group_name      = var.resource_group_name
  location                 = var.location
  account_tier             = "Standard"
  account_replication_type = "LRS"

  static_website {
    index_document     = null
    error_404_document = null
  }

  blob_properties {
    versioning_enabled       = true
    change_feed_enabled      = false
    default_service_version  = "2020-06-12"
    last_access_time_enabled = false
  }
}
----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "resource_group_name" {
  description = "Name of the resource group"
}

variable "location" {
  description = "The Azure region where resources will be created"
}

variable "project_name" {
  description = "Name of the project, used in resource names"
}

variable "environment" {
  description = "Environment (dev, test, prod)"
}
----------------------------------------

Директория: modules/vm
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "public_ip_address" {
  value = azurerm_public_ip.public_ip.ip_address
}
----------------------------------------
    main.tf
      Содержимое файла main.tf:
resource "azurerm_public_ip" "public_ip" {
  name                = "${var.project_name}-pip-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name
  allocation_method   = "Dynamic"
}

resource "azurerm_network_interface" "nic" {
  name                = "${var.project_name}-nic-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = var.subnet_id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.public_ip.id
  }
}

resource "azurerm_linux_virtual_machine" "vm" {
  name                = "${var.project_name}-vm-${var.environment}"
  resource_group_name = var.resource_group_name
  location            = var.location
  size                = var.vm_size
  admin_username      = var.admin_username
  network_interface_ids = [
    azurerm_network_interface.nic.id,
  ]

  admin_ssh_key {
    username   = var.admin_username
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts"
    version   = "latest"
  }

  custom_data = base64encode(<<-EOF
                #!/bin/bash
                apt-get update
                apt-get install -y nginx
                systemctl enable nginx
                systemctl start nginx
                EOF
  )
}
----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "resource_group_name" {
  description = "Name of the resource group"
}

variable "location" {
  description = "The Azure region where resources will be created"
}

variable "subnet_id" {
  description = "ID of the subnet where the VM will be placed"
}

variable "project_name" {
  description = "Name of the project, used in resource names"
}

variable "environment" {
  description = "Environment (dev, test, prod)"
}

variable "admin_username" {
  description = "Username for the VM"
}

variable "vm_size" {
  description = "Size of the virtual machine"
}
----------------------------------------

Директория: modules/monitoring
  Файлы:
    outputs.tf
      Содержимое файла outputs.tf:
output "monitoring_vm_public_ip" {
  value       = azurerm_public_ip.monitoring_pip.ip_address
  description = "The public IP address of the monitoring VM"
}

output "monitoring_vm_private_ip" {
  value       = azurerm_network_interface.monitoring_nic.private_ip_address
  description = "The private IP address of the monitoring VM"
}

output "monitoring_vm_id" {
  value       = azurerm_linux_virtual_machine.monitoring_vm.id
  description = "The ID of the monitoring VM"
}
----------------------------------------
    main.tf
      Содержимое файла main.tf:
resource "azurerm_public_ip" "monitoring_pip" {
  name                = "${var.project_name}-monitoring-pip-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name
  allocation_method   = "Dynamic"
}

resource "azurerm_network_interface" "monitoring_nic" {
  name                = "${var.project_name}-monitoring-nic-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = var.subnet_id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.monitoring_pip.id
  }
}

resource "azurerm_network_security_group" "monitoring_nsg" {
  name                = "${var.project_name}-monitoring-nsg-${var.environment}"
  location            = var.location
  resource_group_name = var.resource_group_name

  security_rule {
    name                       = "AllowSSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowGrafana"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "3000"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_network_interface_security_group_association" "monitoring_nsg_association" {
  network_interface_id      = azurerm_network_interface.monitoring_nic.id
  network_security_group_id = azurerm_network_security_group.monitoring_nsg.id
}

resource "azurerm_linux_virtual_machine" "monitoring_vm" {
  name                = "${var.project_name}-monitoring-vm-${var.environment}"
  resource_group_name = var.resource_group_name
  location            = var.location
  size                = "Standard_B1s"
  admin_username      = var.admin_username
  network_interface_ids = [
    azurerm_network_interface.monitoring_nic.id,
  ]

 admin_ssh_key {
    username   = var.admin_username
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Debian"
    offer     = "debian-11"
    sku       = "11"
    version   = "latest"
  }

  custom_data = base64encode(<<-EOF
              #!/bin/bash
              set -e

              wait_for_apt() {
                while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 ; do
                  echo "Waiting for other apt-get instances to finish..."
                  sleep 1
                done
              }

              wait_for_apt

              sudo apt-get update
              sudo apt-get install -y apt-transport-https software-properties-common wget
              sudo wget -q -O /usr/share/keyrings/grafana.key https://apt.grafana.com/gpg.key
              echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
              sudo apt-get update
              sudo apt-get install -y grafana
              sudo systemctl enable grafana-server
              sudo systemctl start grafana-server
            EOF
  )
}


----------------------------------------
    variables.tf
      Содержимое файла variables.tf:
variable "resource_group_name" {
  description = "Name of the resource group"
  type        = string
}

variable "location" {
  description = "The Azure region where resources will be created"
  type        = string
}

variable "subnet_id" {
  description = "ID of the subnet where the VM will be placed"
  type        = string
}

variable "project_name" {
  description = "Name of the project, used in resource names"
  type        = string
}

variable "environment" {
  description = "Environment (dev, test, prod)"
  type        = string
}

variable "admin_username" {
  description = "Username for the VM"
  type        = string
}

variable "ssh_public_key" {
  description = "The public SSH key to use for the monitoring VM"
  type        = string
}
----------------------------------------
